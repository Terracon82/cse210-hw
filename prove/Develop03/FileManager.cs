/*
NOTE: This class was generated by ChatGPT
*/


using System;
using System.IO;
using System.IO.Compression;
using System.Net.Http;
using System.Threading.Tasks;

public static class FileManager
{
    // *ChatGPT*: Asynchronously loads a CSV file from a ZIP archive at the specified URL using a static HttpClient.
    // This method first downloads the ZIP file from the given URL and then extracts and reads the CSV file.
    // Returns a string containing the contents of the CSV file.
    // Throws InvalidOperationException if no CSV file is found in the zip archive.
    public static async Task<string> LoadCsvFromZipAsync(string url)
    {
        byte[] zipData = await DownloadZipFileAsync(url);
        return ExtractAndReadCsv(zipData);
    }

    // *ChatGPT*: Downloads the ZIP file from the specified URL as a byte array using a static HttpClient.
    // This is an asynchronous method that awaits the response from the HttpClient.
    // Throws exceptions on request failure or inability to download the content.
    private static async Task<byte[]> DownloadZipFileAsync(string url)
    {
        using var httpClient = new HttpClient();
        using HttpResponseMessage response = await httpClient.GetAsync(url);
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsByteArrayAsync();
    }

    // *ChatGPT*: Extracts and reads the CSV file from the provided ZIP data byte array.
    // Iterates through the ZIP archive entries to find a file ending with '.csv' extension.
    // Reads and returns the content of the CSV file as a string.
    // Throws InvalidOperationException if no CSV file is found in the zip archive.
    private static string ExtractAndReadCsv(byte[] zipData)
    {
        using var memoryStream = new MemoryStream(zipData);
        using var archive = new ZipArchive(memoryStream);

        foreach (var entry in archive.Entries)
        {
            if (entry.FullName.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                using var stream = entry.Open();
                using var reader = new StreamReader(stream);
                return reader.ReadToEnd();
            }
        }

        throw new InvalidOperationException("No CSV file found in the zip archive.");
    }
}
